//region Local Imports
import { CALLBACK_EVENTS, chatState } from "./consts.mjs";
import { saveMessageToDatabase } from "../db/index.mjs";
import { messageIdsMap } from './sharedState.mjs'
import { isRateLimited } from "./utilities/isRateLimited.mjs";
import { createTransporter, mailOptions } from '../mailer.mjs'
//endregion
const transporter = createTransporter();

function handleIncomingMessage({ bot, chatId, message, firstName, reply_to_message }) {
  // Check if user is rate limited
  if (isRateLimited(chatId)) {
    bot.sendMessage(chatId, "You are sending too many requests. Please try again later.");
    return;
  }
  console.log('messageIdsMap', message);
  const messageId = messageIdsMap.get(chatId);


  let isMessageIdMatched = messageId === reply_to_message?.message_id;
  switch (true) {
    case /^\/start/i.test(message):
      handleFirstVisit({ bot, chatId, firstName });
      break;
    case isMessageIdMatched:
      handleSayGoodbyeSoon(bot, chatId);
      break;
    default:
      handleUnknownMessage(bot, chatId);
      break;
  }

  // saveMessageToDatabase({ chatId, message, firstName });
}

async function handleCallbackQuery(
  bot,
  {
    data,
    message: {
      chat: { id: chatId }
    }
  }
) {
  if (data === CALLBACK_EVENTS.book_activity_registration) {
    bot.sendMessage(chatId, `–í–∏–±–µ—Ä—ñ—Ç—å:`, {
      reply_markup: {
        one_time_keyboard: true,
        inline_keyboard: [
          [
            { text: "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è Spolka z O.O.", url: process.env.GOOGLE_FORM_URL },
            { text: "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è JDG", url: process.env.GOOGLE__SUB_FORM_URL } // First button on first row
          ]
        ]
      }
    });
  }

  if (data === CALLBACK_EVENTS.request_legalization) {
    bot.sendMessage(chatId, `–í–∏–±–µ—Ä—ñ—Ç—å:`, {
      reply_markup: {
        one_time_keyboard: true,
        inline_keyboard: [
          [
            { text: "–ö–∞—Ä—Ç–∞ –ø–æ–±–∏—Ç—É –∑ PESEL UKR", callback_data: CALLBACK_EVENTS.ask_base_information },
            { text: "–ö–∞—Ä—Ç–∞ –ø–æ–±–∏—Ç—É", callback_data: CALLBACK_EVENTS.ask_base_information } // First button on first row
          ],
          [
            { text: "–ö–∞—Ä—Ç–∞ —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞", callback_data: CALLBACK_EVENTS.ask_base_information },
            { text: "–ö–∞—Ä—Ç–∞ –ø–æ–ª—è–∫–∞", callback_data: CALLBACK_EVENTS.ask_base_information } // First button on first row
          ]
        ]
      }
    });

    // const { message_id } = bot.sendMessage(
    //   message.chat.id,
    //   "–ü—ñ–¥–∫–∞–∂—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∞—à–µ —ñ–º'—è? –¶–µ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –¥–ª—è —Ä–æ–∑—É–º—ñ–Ω–Ω—è —è–∫ –¥–æ –≤–∞—Å –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—è",
    //   {
    //     reply_markup: {
    //       force_reply: true
    //     }
    //   }
    // );
    // chatState[message.chat.id] = ASKING_FOR_USER_NAME;
  }

  if (data === CALLBACK_EVENTS.ask_base_information) {
    const { message_id, ...rest } = await bot.sendMessage(
      chatId,
      "–ü—ñ–¥–∫–∞–∂—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∞—à–µ —ñ–º'—è —Ç–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω?",
      {
        reply_markup: {
          force_reply: true
        }
      }
    );

    transporter.sendMail(mailOptions, (error, info) => {
      if (error) {
          console.log(error);
          bot.sendMessage(chatId, 'Failed to send email');
      } else {
          console.log('Email sent: ' + info.response);
          bot.sendMessage(chatId, 'Email sent successfully');
      }
  });
    messageIdsMap.set(chatId, message_id);
  }
}

function handleFirstVisit({ bot, chatId, firstName }) {
  bot.sendMessage(
    chatId,
    `–ü—Ä–∏–≤—ñ—Ç üôã‚Äç‚ôÄÔ∏è–¢–µ–±–µ –≤—ñ—Ç–∞—î Legal Expert-–±–æ—Ç. 
–¢—É—Ç —Ç–∏ –∑–Ω–∞–π–¥–µ—à —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —â–æ–¥–æ —é—Ä–∏–¥–∏—á–Ω–∏—Ö –ø–æ—Å–ª—É–≥ –¥–ª—è —Ç–µ–±–µ —ñ —Ç–≤–æ–≥–æ –±—ñ–∑–Ω–µ—Å—É
–¢–∏—Å–Ω–∏ —Å—Ç–∞—Ä—Ç —Ç–∞ –æ–±–∏—Ä–∞–π —Ç—É —é—Ä–∏–¥–∏—á–Ω—É –ø–æ—Å–ª—É–≥—É, —è–∫–∞ —Ç–æ–±—ñ –ø–∞—Å—É—î
  `,
    {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é",
              url: process.env.CALENDLY_SCHEDULING_URL
            }
          ],
          [
            {
              text: "–ó–∞–ø–∏—Å –Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ",
              callback_data: "book_activity_registration"
            }
          ],
          [
            {
              text: "–õ–µ–≥–∞–ª—ñ–∑–∞—Ü—ñ—è",
              callback_data: "request_legalization"
            }
          ]
        ]
      }
    }
  );
}

function handleUnknownMessage(bot, chatId) {
  bot.sendMessage(chatId, "Sorry, I don't understand.");
}

function sendMessageWithAskBaseInformation(chatId, optionNumber) {
  var options = {
      reply_markup: JSON.stringify({
      inline_keyboard: [
          [{ text: `Sub-option ${optionNumber}.1`, callback_data: `${optionNumber}_1` }],
          [{ text: `Sub-option ${optionNumber}.2`, callback_data: `${optionNumber}_2` }]
      ]
      })
  };
  bot.sendMessage(chatId, `–î—è–∫—É—î–º–æ –º–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ —â–æ–¥–æ –≤–∞—à–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.`, options);
}
function handleSayGoodbyeSoon(bot, chatId) {
  bot.sendMessage(chatId, "–î—è–∫—É—î–º–æ –º–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ —â–æ–¥–æ –≤–∞—à–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.");
}


function handleReturningUser(bot, chatId) {
  bot.sendMessage(chatId, "Welcome back!");
}

export { handleIncomingMessage, handleCallbackQuery, handleFirstVisit };
